/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.ManageCustomer;

import Business.Airliner.Airliner;
import Business.Customer.Customer;
import Business.Customer.CustomerDirectory;
import Business.Customer.Ticket;
import Business.Schedule.Flight;
import Business.Schedule.FlightSchedule;
import Business.TravelOffice;
import java.awt.CardLayout;
import java.awt.Component;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jiaoli
 */
public class BookCustomerFlightJPanel extends javax.swing.JPanel {
    private JPanel rightPanel;
    private CustomerDirectory customerDirectory;
    private TravelOffice travelOffice;
    private Customer customer;
    private FlightSchedule flightSchedule;
     private Airliner airliner;
     /**
     * Creates new form BookCustomerFlightJPanel
     */
    public BookCustomerFlightJPanel(JPanel rightPanel,TravelOffice travelOffice, Customer customer) {
        initComponents();
        this.rightPanel=rightPanel;
        this.travelOffice = travelOffice;
        this.customer = customer;
        this.customerDirectory = travelOffice.getCustomerDirectory();
        populateTable();
        showCombo();
    }

    private void populateTable(){
        
        DefaultTableModel dtm = (DefaultTableModel) tblSearchFlight.getModel();
        dtm.setRowCount(0);
        for(FlightSchedule fs: travelOffice.getMasterFlightSchedule().getFlightScheduleList() ){
            for(Flight f : fs.getFlightList()){
            Object[] row = new Object[dtm.getColumnCount()];
            row[0] = f;   
            row[1] = f.getFrom();
            row[2] = f.getTo();
            Date date = f.getDepartureTime();  
            DateFormat dateFormat = new SimpleDateFormat("dd-MMM-yyyy HH:mm:ss");  
            String strDate = dateFormat.format(date);
            row[3] = strDate;
            Date date2 = f.getArrivalTime();  
            DateFormat dateFormat2 = new SimpleDateFormat("dd-MMM-yyyy HH:mm:ss");  
            String strDate2 = dateFormat2.format(date2);
            row[4] = strDate2;
            row[5] = f.getTimeSlot();
            dtm.addRow(row);    
           }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        txtTo = new javax.swing.JTextField();
        tbnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSearchFlight = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        btnNext = new javax.swing.JButton();
        cboxDate = new javax.swing.JComboBox<>();
        btnBack = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtFlightNum = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtDate = new javax.swing.JTextField();

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Book Flight");

        jLabel2.setText("From");

        jLabel3.setText("To");

        jLabel4.setText("Date");

        tbnSearch.setText("Search");
        tbnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbnSearchActionPerformed(evt);
            }
        });

        tblSearchFlight.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Flight", "From", "To", "Departure Time", "Arrival Time", "Time Slot"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblSearchFlight);
        if (tblSearchFlight.getColumnModel().getColumnCount() > 0) {
            tblSearchFlight.getColumnModel().getColumn(3).setMinWidth(100);
            tblSearchFlight.getColumnModel().getColumn(4).setMinWidth(100);
        }

        jLabel6.setText("The Search Result As following:");

        btnNext.setText("Next >");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        cboxDate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboxDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboxDateActionPerformed(evt);
            }
        });

        btnBack.setText("<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel5.setText("Flight Number");

        jLabel7.setText("Time");

        txtDate.setText("dd/mm/yyyy");
        txtDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tbnSearch)
                            .addComponent(jLabel4))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnBack)
                                    .addComponent(jLabel6)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtFlightNum, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(132, 132, 132)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                        .addGap(193, 193, 193)
                                                        .addComponent(btnNext))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabel1)
                                                        .addGap(212, 212, 212))))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel2)
                                                    .addComponent(txtFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel7))
                                                .addGap(24, 24, 24)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel3)
                                                    .addComponent(txtTo, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addComponent(cboxDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel5))
                                .addGap(0, 111, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFlightNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboxDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(tbnSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnNext))
                .addGap(18, 18, 18))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cboxDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboxDateActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_cboxDateActionPerformed

    private void showCombo(){
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboxDate.getModel();
        model.removeAllElements();
        model.addElement("Morning");
        model.addElement("Day");
        model.addElement("Evening");
    }
    
    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = tblSearchFlight.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null,"Please select a row of the first table to view details.","Warning",JOptionPane.WARNING_MESSAGE);
        }
        
        else{
            Flight f = (Flight)tblSearchFlight.getValueAt(selectedRow,0);
            for (Ticket t : customer.getTicketList()) {
                if (t.getFlight().getArrivalTime().compareTo(f.getDepartureTime()) != -1 &&
                        t.getFlight().getDepartureTime().compareTo(f.getArrivalTime()) != 1) {
                    JOptionPane.showMessageDialog(null, "You can not book an overlapped ticket!");
                    return;
                }
            }
            SelectCustomerSeatJPanel panel = new SelectCustomerSeatJPanel(rightPanel,f,customer,travelOffice);
           rightPanel.add("SelectCustomerSeatJPanel",panel);
           CardLayout layout = (CardLayout) rightPanel.getLayout();
           layout.next(rightPanel);      
        }                                                                                 
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        rightPanel.remove(this);
        CardLayout layout = (CardLayout) rightPanel.getLayout();
        layout.previous(rightPanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void tbnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbnSearchActionPerformed
        // TODO add your handling code here:
        search();
    }//GEN-LAST:event_tbnSearchActionPerformed

    private void txtDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDateActionPerformed

     private void search(){    
         ArrayList<Flight> searchResult = new ArrayList<Flight>();
         
         ArrayList<Flight> searchByFlightNum = new ArrayList<>();
         ArrayList<Flight> searchByFrom = new ArrayList<Flight>();
         ArrayList<Flight> searchByTo = new ArrayList<Flight>();
         ArrayList<Flight> searchByDate = new ArrayList<>();
         ArrayList<Flight> searchByTime = new ArrayList<Flight>();
        
         
         //Search by Flight Number:
         String flightNum = txtFlightNum.getText();
         for (FlightSchedule fs : travelOffice.getMasterFlightSchedule().getFlightScheduleList()) {
             for (Flight flight : fs.getFlightList()) {
                 if (flight.getFlightNum().equalsIgnoreCase(flightNum)) {
                     searchByFlightNum.add(flight);
                 }
             }
         }
         
         //Search by From：
         String from = (String) txtFrom.getText();
           for(FlightSchedule fs: travelOffice.getMasterFlightSchedule().getFlightScheduleList() ){
                for(Flight flight : fs.getFlightList()){
                    if(flight.getFrom().equalsIgnoreCase(from))
                       searchByFrom.add(flight);
                }
            }
           
         //Search by To：
          String to = (String) txtTo.getText();
           for(FlightSchedule fs: travelOffice.getMasterFlightSchedule().getFlightScheduleList() ){
                for(Flight flight : fs.getFlightList()){
                    if(flight.getTo().equalsIgnoreCase(to))
                       searchByTo.add(flight);
                }
            }
           
        try {
            //Search by Date:
            Date dateField = new SimpleDateFormat("dd/MM/yyyy").parse(txtDate.getText());
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(null,"Date Format is Incorrect!");
        }
        for (FlightSchedule fs : travelOffice.getMasterFlightSchedule().getFlightScheduleList()) {
            for (Flight flight : fs.getFlightList()) {
                Date date = flight.getDepartureTime();
                DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");  
                String strDate = dateFormat.format(date);
                if (strDate.equals(txtDate.getText())) {
                    searchByDate.add(flight);
                }
            }
        }

           
        //Search by Time：
        String d = (String) cboxDate.getSelectedItem();
        for(FlightSchedule fs: travelOffice.getMasterFlightSchedule().getFlightScheduleList() ){
            for(Flight flight : fs.getFlightList()){
                if(flight.getTimeSlot().equalsIgnoreCase(d))
                    searchByTime.add(flight);
                }
        }         

         //Combine all results: 
        for(FlightSchedule fs: travelOffice.getMasterFlightSchedule().getFlightScheduleList() ){
            for(Flight result : fs.getFlightList()){
               if(searchByFlightNum.contains(result) && searchByFrom.contains(result) && 
                 searchByTo.contains(result) && searchByDate.contains(result) && searchByTime.contains(result)){
               searchResult.add(result);
               }
            }
        }
         populateSearchTable(searchResult);
     }
     
        private void populateSearchTable(ArrayList<Flight> searchResult){
            DefaultTableModel dtm = (DefaultTableModel) tblSearchFlight.getModel();
            dtm.setRowCount(0);
            for(Flight flight: searchResult){
                Object[] row = new Object[6];
                row[0] = flight;
                row[1] = flight.getFrom();
                row[2] = flight.getTo();
                Date date = flight.getDepartureTime();  
                DateFormat dateFormat = new SimpleDateFormat("dd-MMM-yyyy HH:mm:ss");  
                String strDate = dateFormat.format(date);
                row[3] = strDate;
                Date date2 = flight.getArrivalTime();  
                DateFormat dateFormat2 = new SimpleDateFormat("dd-MMM-yyyy HH:mm:ss");  
                String strDate2 = dateFormat2.format(date2);
                row[4] = strDate2;
                row[5] = flight.getTimeSlot();
                dtm.addRow(row);    
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnNext;
    private javax.swing.JComboBox<String> cboxDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblSearchFlight;
    private javax.swing.JButton tbnSearch;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtFlightNum;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtTo;
    // End of variables declaration//GEN-END:variables
}
